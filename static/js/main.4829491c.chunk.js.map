{"version":3,"sources":["components/Row.js","components/Card.js","components/Input.js","components/Pagination.js","App.js","components/AuthToken.js","serviceWorker.js","index.js"],"names":["Row","dateWiseInfo","conversation_count","missed_chat_count","visitors_with_conversation_count","date","scope","Card","title","count","className","style","width","padding","float","Input","htmlFor","id","type","value","placeholder","onChange","onSubmit","minLength","maxLength","required","Pagination","rowsPerPage","totalRows","paginate","pageNumbers","i","Math","ceil","push","map","number","key","href","onClick","App","defaultToken","useState","startDate","setStartDate","endDate","setEndDate","token","setToken","loading","setLoading","currentPage","setCurrentPage","url","setUrl","output","setOutput","outputByDate","setOutputByDate","headers","Authorization","Accept","setHeaders","useEffect","a","axios","get","res","data","by_date","indexOfLastRow","indexOfFirstRow","currentRows","slice","console","log","Array","isArray","e","preventDefault","newDate","target","newToken","total_conversation_count","total_user_message_count","total_visitor_message_count","length","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4829491c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Row = ({dateWiseInfo})=> {\n  const {conversation_count, missed_chat_count, visitors_with_conversation_count, date } = dateWiseInfo\n    return (\n         <tr>\n            \n\n          <th scope=\"row\">{conversation_count}</th>\n          <td>{missed_chat_count}</td>\n          <td>{visitors_with_conversation_count}</td>\n          <td>{date}</td>\n            {/* <td></td>\n            <td>Otto</td>\n            <td>@mdo</td> */}\n      </tr>\n    )\n}\n\nexport default Row\n","import React from 'react';\n\nconst Card = ({title, count})=>{\nconst style={\n    width : '18rem',\n    padding : '2% 1%',\n    float : 'left'\n}\n  return (\n    <div className='card' style={style}>\n      <div className='card-body'>\n        <h2 className='card-title'>{count}</h2>\n        <p className='card-text'>\n            {title}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react'\n\nconst Input = ({htmlFor, id, type, value, placeholder, onSubmit, onChange}) => {\n    return (\n            <input type={type} value={value} onChange={onChange} placeholder={placeholder} minLength=\"10\" maxLength=\"10\" required />\n    )\n}\n\nexport default Input\n","import React from 'react';\n\nconst Pagination = ({ rowsPerPage, totalRows, paginate }) => {\n  const pageNumbers = [];\n\n  for (let i = 1; i <= Math.ceil(totalRows/ rowsPerPage); i++) {\n    pageNumbers.push(i);\n  }\n\n  return (\n    <nav>\n      <ul className='pagination'>\n        {pageNumbers.map(number => (\n          <li key={number} className='page.item'>\n            <a href='!#' className='page-link' onClick={()=> paginate(number)}>\n              {number}\n            </a>\n          </li>\n        ))}\n      </ul>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import React, { useState, useEffect } from 'react';\n// import Table from './components/Table';\nimport Row from './components/Row'\nimport Card from './components/Card';\nimport AuthToken from './components/AuthToken';\nimport Input from './components/Input';\nimport Pagination from './components/Pagination'\nimport './App.css';\nimport axios from 'axios';\n\n\nconst App = () => {\n  const defaultToken = AuthToken;\n  const [startDate, setStartDate] = useState('2017-05-01');\n  const [endDate, setEndDate] = useState('2017-06-01');\n  const [token, setToken] = useState(defaultToken);\n  const [loading, setLoading] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [url, setUrl] = useState(\n    `https://api.giosg.com/api/reporting/v1/rooms/84e0fefa-5675-11e7-a349-00163efdd8db/chat-stats/daily/?start_date=${startDate}&end_date=${endDate}`\n  );\n  const [output, setOutput] = useState({});\n  const [outputByDate, setOutputByDate] = useState([])\n  const [rowsPerPage] = useState(5)\n  const [headers, setHeaders] = useState({\n    headers: {\n      Authorization: `Bearer ${token}`,\n      Accept: 'application/json'\n    }\n  });\n\n\n  useEffect(() => {\n    const setHeaders = async () => {\n      setLoading(true);\n      const res = await axios.get(url, headers);\n      setOutput(res.data);\n      setOutputByDate(res.data.by_date)\n      setLoading(false);\n    };\n    setHeaders();\n  }, [url, headers]);\n\n  //Get current\n  const indexOfLastRow = currentPage * rowsPerPage;\n  const indexOfFirstRow = indexOfLastRow - rowsPerPage;\n  const currentRows = outputByDate.slice(indexOfFirstRow, indexOfLastRow);\n  //Change pages\n  const paginate = (pageNumber) => setCurrentPage(pageNumber)\n\n  //If startDate, EndDate or Access token is changed\n  const setStart = e => {\n    const newDate = e.target.value;\n    setStartDate(newDate);\n    setUrl(\n      `https://api.giosg.com/api/reporting/v1/rooms/84e0fefa-5675-11e7-a349-00163efdd8db/chat-stats/daily/?start_date=${newDate}&end_date=${endDate}`\n    );\n  };\n\n  const setEnd = e => {\n    const newDate = e.target.value;\n    setEndDate(newDate);\n    setUrl(\n      `https://api.giosg.com/api/reporting/v1/rooms/84e0fefa-5675-11e7-a349-00163efdd8db/chat-stats/daily/?start_date=${startDate}&end_date=${newDate}`\n    );\n  };\n\n  const setAuthToken = e => {\n    const newToken = e.target.value;\n    setToken(newToken);\n    setHeaders({ ...headers, Authorization: `Bearer ${newToken}` });\n  };\n\n  const fetchApidata = e => {\n    e.preventDefault();\n  };\n\n  console.log('_______Data________', output);\n  console.log(\"By date\", outputByDate)\n  console.log('Is byDate and array ? : ', Array.isArray(outputByDate))\n\n\n\n  return (\n    <div className='container mt-5'>\n      <h1 className='text-primary mb-3'>Awesome react app</h1>\n      {/* <p>{setStart || setEnd || setToken ? 'Date Format : 2017-06-05' : ''}</p> */}\n      <form onSubmit={fetchApidata}>\n        <Input\n          type={'text'}\n          value={startDate}\n          placeholder={'2017-05-01'}\n          onChange={setStart}\n        />\n        <Input\n          type={'text'}\n          value={endDate}\n          placeholder={'2017-06-01'}\n          onChange={setEnd}\n        />\n        <Input\n          value={token === defaultToken ? '' : token}\n          type={'text'}\n          placeholder={defaultToken ? 'Access token' : ''}\n          onChange={setAuthToken}\n        />\n      </form>\n\n      <h4>{loading ? 'Loading data...' : ''}</h4>\n\n      <div className='App-card-row'>\n        <Card\n          title={'Total conversation count'}\n          count={output.total_conversation_count}\n        />\n        <Card\n          title={'Total user message count'}\n          count={output.total_user_message_count}\n        />\n        <Card\n          title={'Total visitor message count'}\n          count={output.total_visitor_message_count}\n        />\n\n      </div>\n\n      <table className='table'>\n        <thead className='thead-dark'>\n          <tr>\n            <th scope='col'>conversation_count</th>\n            <th scope='col'>missed_chat_count</th>\n            <th scope='col'>visitors_with_conversation_count</th>\n            <th scope='col'>\n              Date <button>Asc</button>\n            </th>\n          </tr>\n        </thead>\n\n        <tbody>\n          {currentRows.map(dateWiseInfo=> <Row dateWiseInfo={dateWiseInfo}/>)}\n        </tbody>\n      </table>\n\n      {/* <Posts posts={currentPosts} loading={loading} /> */}\n      <Pagination rowsPerPage={rowsPerPage} totalRows={outputByDate.length} paginate={paginate}/>  \n  </div>\n  );\n};\n\nexport default App;\n","const AuthToken = '38ab33b9f32a3478555d1e06189d50f01a872966'\nexport default AuthToken\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}